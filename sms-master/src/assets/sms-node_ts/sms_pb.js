// source: sms.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.grpc.sms.v1.CheckDlrSmsRequest', null, global);
goog.exportSymbol('proto.grpc.sms.v1.CheckDlrSmsRespone', null, global);
goog.exportSymbol('proto.grpc.sms.v1.DlrStatusSmsRequest', null, global);
goog.exportSymbol('proto.grpc.sms.v1.DlrStatusSmsRespone', null, global);
goog.exportSymbol('proto.grpc.sms.v1.GetStatusRequest', null, global);
goog.exportSymbol('proto.grpc.sms.v1.GetStatusResponse', null, global);
goog.exportSymbol('proto.grpc.sms.v1.ReceivedSmsRequest', null, global);
goog.exportSymbol('proto.grpc.sms.v1.ReceivedSmsRespone', null, global);
goog.exportSymbol('proto.grpc.sms.v1.SendSmsRequest', null, global);
goog.exportSymbol('proto.grpc.sms.v1.SendSmsResponse', null, global);
goog.exportSymbol('proto.grpc.sms.v1.Sim', null, global);
goog.exportSymbol('proto.grpc.sms.v1.SmsReceived', null, global);
goog.exportSymbol('proto.grpc.sms.v1.Smsc', null, global);
goog.exportSymbol('proto.grpc.sms.v1.Smsc.Dlr', null, global);
goog.exportSymbol('proto.grpc.sms.v1.Smsc.Sms', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.Sim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.Sim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.Sim.displayName = 'proto.grpc.sms.v1.Sim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.Smsc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.Smsc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.Smsc.displayName = 'proto.grpc.sms.v1.Smsc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.Smsc.Sms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.Smsc.Sms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.Smsc.Sms.displayName = 'proto.grpc.sms.v1.Smsc.Sms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.Smsc.Dlr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.Smsc.Dlr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.Smsc.Dlr.displayName = 'proto.grpc.sms.v1.Smsc.Dlr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.SmsReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.SmsReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.SmsReceived.displayName = 'proto.grpc.sms.v1.SmsReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.GetStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.GetStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.GetStatusRequest.displayName = 'proto.grpc.sms.v1.GetStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.GetStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.sms.v1.GetStatusResponse.repeatedFields_, null);
};
goog.inherits(proto.grpc.sms.v1.GetStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.GetStatusResponse.displayName = 'proto.grpc.sms.v1.GetStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.SendSmsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.SendSmsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.SendSmsRequest.displayName = 'proto.grpc.sms.v1.SendSmsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.SendSmsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.SendSmsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.SendSmsResponse.displayName = 'proto.grpc.sms.v1.SendSmsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.ReceivedSmsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.ReceivedSmsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.ReceivedSmsRequest.displayName = 'proto.grpc.sms.v1.ReceivedSmsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.ReceivedSmsRespone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.sms.v1.ReceivedSmsRespone.repeatedFields_, null);
};
goog.inherits(proto.grpc.sms.v1.ReceivedSmsRespone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.ReceivedSmsRespone.displayName = 'proto.grpc.sms.v1.ReceivedSmsRespone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.DlrStatusSmsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.DlrStatusSmsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.DlrStatusSmsRequest.displayName = 'proto.grpc.sms.v1.DlrStatusSmsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.DlrStatusSmsRespone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.DlrStatusSmsRespone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.DlrStatusSmsRespone.displayName = 'proto.grpc.sms.v1.DlrStatusSmsRespone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.CheckDlrSmsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.CheckDlrSmsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.CheckDlrSmsRequest.displayName = 'proto.grpc.sms.v1.CheckDlrSmsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.sms.v1.CheckDlrSmsRespone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.sms.v1.CheckDlrSmsRespone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grpc.sms.v1.CheckDlrSmsRespone.displayName = 'proto.grpc.sms.v1.CheckDlrSmsRespone';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.Sim.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.Sim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.Sim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Sim.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number: jspb.Message.getFieldWithDefault(msg, 2, ""),
    online: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.Sim}
 */
proto.grpc.sms.v1.Sim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.Sim;
  return proto.grpc.sms.v1.Sim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.Sim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.Sim}
 */
proto.grpc.sms.v1.Sim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.Sim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.Sim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.Sim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Sim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOnline();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.grpc.sms.v1.Sim.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.Sim} returns this
 */
proto.grpc.sms.v1.Sim.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string number = 2;
 * @return {string}
 */
proto.grpc.sms.v1.Sim.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Sim} returns this
 */
proto.grpc.sms.v1.Sim.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string online = 3;
 * @return {string}
 */
proto.grpc.sms.v1.Sim.prototype.getOnline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Sim} returns this
 */
proto.grpc.sms.v1.Sim.prototype.setOnline = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.Smsc.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.Smsc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.Smsc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Smsc.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    adminId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, ""),
    failed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    queued: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sms: (f = msg.getSms()) && proto.grpc.sms.v1.Smsc.Sms.toObject(includeInstance, f),
    dlr: (f = msg.getDlr()) && proto.grpc.sms.v1.Smsc.Dlr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.Smsc}
 */
proto.grpc.sms.v1.Smsc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.Smsc;
  return proto.grpc.sms.v1.Smsc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.Smsc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.Smsc}
 */
proto.grpc.sms.v1.Smsc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdminId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFailed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueued(value);
      break;
    case 7:
      var value = new proto.grpc.sms.v1.Smsc.Sms;
      reader.readMessage(value,proto.grpc.sms.v1.Smsc.Sms.deserializeBinaryFromReader);
      msg.setSms(value);
      break;
    case 8:
      var value = new proto.grpc.sms.v1.Smsc.Dlr;
      reader.readMessage(value,proto.grpc.sms.v1.Smsc.Dlr.deserializeBinaryFromReader);
      msg.setDlr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.Smsc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.Smsc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.Smsc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Smsc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAdminId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFailed();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getQueued();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSms();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.grpc.sms.v1.Smsc.Sms.serializeBinaryToWriter
    );
  }
  f = message.getDlr();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.grpc.sms.v1.Smsc.Dlr.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.Smsc.Sms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.Smsc.Sms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Smsc.Sms.toObject = function(includeInstance, msg) {
  var f, obj = {
    received: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inbound: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outbound: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.Smsc.Sms}
 */
proto.grpc.sms.v1.Smsc.Sms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.Smsc.Sms;
  return proto.grpc.sms.v1.Smsc.Sms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.Smsc.Sms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.Smsc.Sms}
 */
proto.grpc.sms.v1.Smsc.Sms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceived(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInbound(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutbound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.Smsc.Sms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.Smsc.Sms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Smsc.Sms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceived();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSent();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInbound();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutbound();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 received = 1;
 * @return {number}
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.getReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.Smsc.Sms} returns this
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.setReceived = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sent = 2;
 * @return {number}
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.getSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.Smsc.Sms} returns this
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.setSent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string inbound = 3;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.getInbound = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc.Sms} returns this
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.setInbound = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string outbound = 4;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.getOutbound = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc.Sms} returns this
 */
proto.grpc.sms.v1.Smsc.Sms.prototype.setOutbound = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.Smsc.Dlr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.Smsc.Dlr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Smsc.Dlr.toObject = function(includeInstance, msg) {
  var f, obj = {
    received: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inbound: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outbound: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.Smsc.Dlr}
 */
proto.grpc.sms.v1.Smsc.Dlr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.Smsc.Dlr;
  return proto.grpc.sms.v1.Smsc.Dlr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.Smsc.Dlr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.Smsc.Dlr}
 */
proto.grpc.sms.v1.Smsc.Dlr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceived(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInbound(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutbound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.Smsc.Dlr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.Smsc.Dlr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.Smsc.Dlr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceived();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSent();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInbound();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutbound();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 received = 1;
 * @return {number}
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.getReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.Smsc.Dlr} returns this
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.setReceived = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sent = 2;
 * @return {number}
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.getSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.Smsc.Dlr} returns this
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.setSent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string inbound = 3;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.getInbound = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc.Dlr} returns this
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.setInbound = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string outbound = 4;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.getOutbound = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc.Dlr} returns this
 */
proto.grpc.sms.v1.Smsc.Dlr.prototype.setOutbound = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string admin_id = 2;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.prototype.getAdminId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.setAdminId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string status = 4;
 * @return {string}
 */
proto.grpc.sms.v1.Smsc.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 failed = 5;
 * @return {number}
 */
proto.grpc.sms.v1.Smsc.prototype.getFailed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.setFailed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 queued = 6;
 * @return {number}
 */
proto.grpc.sms.v1.Smsc.prototype.getQueued = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.setQueued = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Sms sms = 7;
 * @return {?proto.grpc.sms.v1.Smsc.Sms}
 */
proto.grpc.sms.v1.Smsc.prototype.getSms = function() {
  return /** @type{?proto.grpc.sms.v1.Smsc.Sms} */ (
    jspb.Message.getWrapperField(this, proto.grpc.sms.v1.Smsc.Sms, 7));
};


/**
 * @param {?proto.grpc.sms.v1.Smsc.Sms|undefined} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
*/
proto.grpc.sms.v1.Smsc.prototype.setSms = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.clearSms = function() {
  return this.setSms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.sms.v1.Smsc.prototype.hasSms = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Dlr dlr = 8;
 * @return {?proto.grpc.sms.v1.Smsc.Dlr}
 */
proto.grpc.sms.v1.Smsc.prototype.getDlr = function() {
  return /** @type{?proto.grpc.sms.v1.Smsc.Dlr} */ (
    jspb.Message.getWrapperField(this, proto.grpc.sms.v1.Smsc.Dlr, 8));
};


/**
 * @param {?proto.grpc.sms.v1.Smsc.Dlr|undefined} value
 * @return {!proto.grpc.sms.v1.Smsc} returns this
*/
proto.grpc.sms.v1.Smsc.prototype.setDlr = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grpc.sms.v1.Smsc} returns this
 */
proto.grpc.sms.v1.Smsc.prototype.clearDlr = function() {
  return this.setDlr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grpc.sms.v1.Smsc.prototype.hasDlr = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.SmsReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.SmsReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.SmsReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.SmsReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    form: jspb.Message.getFieldWithDefault(msg, 2, ""),
    to: jspb.Message.getFieldWithDefault(msg, 3, ""),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    time: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.SmsReceived}
 */
proto.grpc.sms.v1.SmsReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.SmsReceived;
  return proto.grpc.sms.v1.SmsReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.SmsReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.SmsReceived}
 */
proto.grpc.sms.v1.SmsReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setForm(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.SmsReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.SmsReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.SmsReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.SmsReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getForm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.grpc.sms.v1.SmsReceived.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.grpc.sms.v1.SmsReceived} returns this
 */
proto.grpc.sms.v1.SmsReceived.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string form = 2;
 * @return {string}
 */
proto.grpc.sms.v1.SmsReceived.prototype.getForm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SmsReceived} returns this
 */
proto.grpc.sms.v1.SmsReceived.prototype.setForm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to = 3;
 * @return {string}
 */
proto.grpc.sms.v1.SmsReceived.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SmsReceived} returns this
 */
proto.grpc.sms.v1.SmsReceived.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.grpc.sms.v1.SmsReceived.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SmsReceived} returns this
 */
proto.grpc.sms.v1.SmsReceived.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string time = 5;
 * @return {string}
 */
proto.grpc.sms.v1.SmsReceived.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SmsReceived} returns this
 */
proto.grpc.sms.v1.SmsReceived.prototype.setTime = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.GetStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.GetStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.GetStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.GetStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.GetStatusRequest}
 */
proto.grpc.sms.v1.GetStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.GetStatusRequest;
  return proto.grpc.sms.v1.GetStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.GetStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.GetStatusRequest}
 */
proto.grpc.sms.v1.GetStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.GetStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.GetStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.GetStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.GetStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.sms.v1.GetStatusResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.GetStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.GetStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.GetStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.GetStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    smscsList: jspb.Message.toObjectList(msg.getSmscsList(),
    proto.grpc.sms.v1.Smsc.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.GetStatusResponse}
 */
proto.grpc.sms.v1.GetStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.GetStatusResponse;
  return proto.grpc.sms.v1.GetStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.GetStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.GetStatusResponse}
 */
proto.grpc.sms.v1.GetStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.sms.v1.Smsc;
      reader.readMessage(value,proto.grpc.sms.v1.Smsc.deserializeBinaryFromReader);
      msg.addSmscs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.GetStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.GetStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.GetStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.GetStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSmscsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.sms.v1.Smsc.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Smsc smscs = 1;
 * @return {!Array<!proto.grpc.sms.v1.Smsc>}
 */
proto.grpc.sms.v1.GetStatusResponse.prototype.getSmscsList = function() {
  return /** @type{!Array<!proto.grpc.sms.v1.Smsc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.sms.v1.Smsc, 1));
};


/**
 * @param {!Array<!proto.grpc.sms.v1.Smsc>} value
 * @return {!proto.grpc.sms.v1.GetStatusResponse} returns this
*/
proto.grpc.sms.v1.GetStatusResponse.prototype.setSmscsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.sms.v1.Smsc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.sms.v1.Smsc}
 */
proto.grpc.sms.v1.GetStatusResponse.prototype.addSmscs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.sms.v1.Smsc, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.sms.v1.GetStatusResponse} returns this
 */
proto.grpc.sms.v1.GetStatusResponse.prototype.clearSmscsList = function() {
  return this.setSmscsList([]);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.grpc.sms.v1.GetStatusResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.GetStatusResponse} returns this
 */
proto.grpc.sms.v1.GetStatusResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.SendSmsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.SendSmsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.SendSmsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: jspb.Message.getFieldWithDefault(msg, 1, ""),
    smsc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    charset: jspb.Message.getFieldWithDefault(msg, 4, ""),
    coding: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tmpflag: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.SendSmsRequest}
 */
proto.grpc.sms.v1.SendSmsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.SendSmsRequest;
  return proto.grpc.sms.v1.SendSmsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.SendSmsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.SendSmsRequest}
 */
proto.grpc.sms.v1.SendSmsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmsc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoding(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTmpflag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.SendSmsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.SendSmsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.SendSmsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSmsc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCharset();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCoding();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTmpflag();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string to = 1;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsRequest} returns this
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string smsc = 2;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.getSmsc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsRequest} returns this
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.setSmsc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsRequest} returns this
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string charset = 4;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.getCharset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsRequest} returns this
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.setCharset = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string coding = 5;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.getCoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsRequest} returns this
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.setCoding = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tmpFlag = 6;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.getTmpflag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsRequest} returns this
 */
proto.grpc.sms.v1.SendSmsRequest.prototype.setTmpflag = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.SendSmsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.SendSmsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.SendSmsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.SendSmsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticket: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.SendSmsResponse}
 */
proto.grpc.sms.v1.SendSmsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.SendSmsResponse;
  return proto.grpc.sms.v1.SendSmsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.SendSmsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.SendSmsResponse}
 */
proto.grpc.sms.v1.SendSmsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.SendSmsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.SendSmsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.SendSmsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.SendSmsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string msgID = 1;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsResponse.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsResponse} returns this
 */
proto.grpc.sms.v1.SendSmsResponse.prototype.setMsgid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ticket = 2;
 * @return {string}
 */
proto.grpc.sms.v1.SendSmsResponse.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.SendSmsResponse} returns this
 */
proto.grpc.sms.v1.SendSmsResponse.prototype.setTicket = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.ReceivedSmsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.ReceivedSmsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.ReceivedSmsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    form: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    time: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.ReceivedSmsRequest}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.ReceivedSmsRequest;
  return proto.grpc.sms.v1.ReceivedSmsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.ReceivedSmsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.ReceivedSmsRequest}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setForm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.ReceivedSmsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.ReceivedSmsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.ReceivedSmsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string form = 1;
 * @return {string}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.getForm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.ReceivedSmsRequest} returns this
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.setForm = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.ReceivedSmsRequest} returns this
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.ReceivedSmsRequest} returns this
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string time = 4;
 * @return {string}
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.ReceivedSmsRequest} returns this
 */
proto.grpc.sms.v1.ReceivedSmsRequest.prototype.setTime = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.sms.v1.ReceivedSmsRespone.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.ReceivedSmsRespone.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.ReceivedSmsRespone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.ReceivedSmsRespone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.ReceivedSmsRespone.toObject = function(includeInstance, msg) {
  var f, obj = {
    smsreceivedList: jspb.Message.toObjectList(msg.getSmsreceivedList(),
    proto.grpc.sms.v1.SmsReceived.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.ReceivedSmsRespone}
 */
proto.grpc.sms.v1.ReceivedSmsRespone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.ReceivedSmsRespone;
  return proto.grpc.sms.v1.ReceivedSmsRespone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.ReceivedSmsRespone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.ReceivedSmsRespone}
 */
proto.grpc.sms.v1.ReceivedSmsRespone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.sms.v1.SmsReceived;
      reader.readMessage(value,proto.grpc.sms.v1.SmsReceived.deserializeBinaryFromReader);
      msg.addSmsreceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.ReceivedSmsRespone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.ReceivedSmsRespone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.ReceivedSmsRespone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.ReceivedSmsRespone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSmsreceivedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.sms.v1.SmsReceived.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SmsReceived smsReceived = 1;
 * @return {!Array<!proto.grpc.sms.v1.SmsReceived>}
 */
proto.grpc.sms.v1.ReceivedSmsRespone.prototype.getSmsreceivedList = function() {
  return /** @type{!Array<!proto.grpc.sms.v1.SmsReceived>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.sms.v1.SmsReceived, 1));
};


/**
 * @param {!Array<!proto.grpc.sms.v1.SmsReceived>} value
 * @return {!proto.grpc.sms.v1.ReceivedSmsRespone} returns this
*/
proto.grpc.sms.v1.ReceivedSmsRespone.prototype.setSmsreceivedList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.sms.v1.SmsReceived=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.sms.v1.SmsReceived}
 */
proto.grpc.sms.v1.ReceivedSmsRespone.prototype.addSmsreceived = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.sms.v1.SmsReceived, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grpc.sms.v1.ReceivedSmsRespone} returns this
 */
proto.grpc.sms.v1.ReceivedSmsRespone.prototype.clearSmsreceivedList = function() {
  return this.setSmsreceivedList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.DlrStatusSmsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.DlrStatusSmsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msg: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.DlrStatusSmsRequest}
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.DlrStatusSmsRequest;
  return proto.grpc.sms.v1.DlrStatusSmsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.DlrStatusSmsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.DlrStatusSmsRequest}
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.DlrStatusSmsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.DlrStatusSmsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string messageID = 1;
 * @return {string}
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.DlrStatusSmsRequest} returns this
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.DlrStatusSmsRequest} returns this
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.DlrStatusSmsRequest} returns this
 */
proto.grpc.sms.v1.DlrStatusSmsRequest.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.DlrStatusSmsRespone.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.DlrStatusSmsRespone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.DlrStatusSmsRespone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.DlrStatusSmsRespone.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.DlrStatusSmsRespone}
 */
proto.grpc.sms.v1.DlrStatusSmsRespone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.DlrStatusSmsRespone;
  return proto.grpc.sms.v1.DlrStatusSmsRespone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.DlrStatusSmsRespone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.DlrStatusSmsRespone}
 */
proto.grpc.sms.v1.DlrStatusSmsRespone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.DlrStatusSmsRespone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.DlrStatusSmsRespone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.DlrStatusSmsRespone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.DlrStatusSmsRespone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.CheckDlrSmsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.CheckDlrSmsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.CheckDlrSmsRequest}
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.CheckDlrSmsRequest;
  return proto.grpc.sms.v1.CheckDlrSmsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.CheckDlrSmsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.CheckDlrSmsRequest}
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.CheckDlrSmsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.CheckDlrSmsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string msgID = 1;
 * @return {string}
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.CheckDlrSmsRequest} returns this
 */
proto.grpc.sms.v1.CheckDlrSmsRequest.prototype.setMsgid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.sms.v1.CheckDlrSmsRespone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.sms.v1.CheckDlrSmsRespone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.sms.v1.CheckDlrSmsRespone}
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.sms.v1.CheckDlrSmsRespone;
  return proto.grpc.sms.v1.CheckDlrSmsRespone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.sms.v1.CheckDlrSmsRespone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.sms.v1.CheckDlrSmsRespone}
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.sms.v1.CheckDlrSmsRespone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.sms.v1.CheckDlrSmsRespone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grpc.sms.v1.CheckDlrSmsRespone} returns this
 */
proto.grpc.sms.v1.CheckDlrSmsRespone.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.grpc.sms.v1);